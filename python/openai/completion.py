from typing import Dict, List


class Completion:
    """Stores a text completion with its associated score and model.

    Attributes:
        text (str): The completion text.
        index (int): The index of the completion in the list of completions returned by the API.
        logprobs (list(float)): The log probabilities of each token in the completion.
        finish_reason (str): The reason the completion finished.
    """

    def __init__(self, text: str, index: int, logprobs: List[float], finish_reason: str):
        self.text = text
        self.index = index
        self.logprobs = logprobs
        self.finish_reason = finish_reason

    def text_lines(self):
        """Return the completion text as a list of lines."""
        return self.text.splitlines()


class CompletionRequest:
    """Stores the parameters used to generate a completion."""

    def __init__(self, prompt: str, model: str, max_tokens: int, temperature: float):
        self.prompt = prompt
        self.model = model
        self.max_tokens = max_tokens
        self.temperature = temperature

    def to_dict(self) -> Dict[str, str]:
        """Convert the completion request to a dictionary."""
        return {
            "prompt": self.prompt,
            "model": self.model,
            "max_tokens": str(self.max_tokens),
            "temperature": str(self.temperature),
        }


class CompletionResponse:
    """Stores a list of completions generated by an AI model.

    Attributes:
        completions (list(Completion)): The list of completions generated by the model.
    """

    def __init__(self, completions: List[Completion]):
        self.completions = completions
